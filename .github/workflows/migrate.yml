name: Infra Construction

on:
  workflow_dispatch:

jobs:
  DeployInfraAndBuild:
    name: Deploy Infra and Build
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Cache Terraform binary
        uses: actions/cache@v3
        with:
          path: /usr/bin/terraform
          key: terraform-cache-${{ runner.os }}-${{ hashFiles('**/terraform') }}
          restore-keys: |
            terraform-cache-${{ runner.os }}-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false
     
      - name: Update Terraform Setup
        working-directory: Terraform 
        run: |
           sed -i "s|{tmp_subscription_id}|${{ secrets.SUBSCRIPTION_ID }}|g" variables.tfvars
           sed -i "s|{tmp_tenant_id}|${{ secrets.TENANT_ID }}|g" variables.tfvars
           sed -i "s|{tmp_sp_client_id}|${{ secrets.SP_CLIENT_ID }}|g" variables.tfvars
           sed -i "s|{tmp_sp_client_secret}|${{ secrets.SP_CLIENT_SECRET }}|g" variables.tfvars

           sed -i "s|{tmp_resource_group_name}|${{ vars.RESOURCE_GROUP_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_resource_group_location}|${{ vars.RESOURCE_GROUP_LOCATION }}|g" variables.tfvars

           sed -i "s|{tmp_db_server_name}|${{ vars.DB_SERVER_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_db_server_user}|${{ secrets.DB_SERVER_USER }}|g" variables.tfvars
           sed -i "s|{tmp_db_server_password}|${{ secrets.DB_SERVER_PASSWORD }}|g" variables.tfvars

           sed -i "s|{tmp_db_name}|${{ vars.DB_NAME }}|g" variables.tfvars
           
           sed -i "s|{tmp_app_name}|${{ vars.APP_NAME }}|g" variables.tfvars
           sed -i "s|{tmp_servicebus_name}|${{ vars.SERVICEBUS_NAME }}|g" variables.tfvars

      - name: Start Terraform Deploy
        working-directory: Terraform
        run: |
          terraform init
          terraform validate
          terraform plan -var-file=variables.tfvars
          terraform apply -auto-approve -var-file=variables.tfvars
          service_bus_connection_string=$(terraform output -raw service_bus_connection_string)
          if [ -z "$service_bus_connection_string" ]; then
            echo "Error: Service Bus connection string is empty!"
            exit 1
          fi
          echo "$service_bus_connection_string" > ../service_bus_connection_string.txt

      - name: Upload Service Bus Connection String as artifact
        uses: actions/upload-artifact@v4
        with:
          name: service-bus-connection-string
          path: service_bus_connection_string.txt
          
  RestoreDataToDB:
    name: Restore Data to Postgres DB
    needs: DeployInfraAndBuild
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Install Psql
        run: |
          sudo apt update
          sudo apt install postgresql-client
          pg_restore --version

      - name: Create Restore Data Script
        working-directory: data
        run: | 
          echo "export PGSSLMODE='require'" > ../restoredata.sh
          echo "export PGPASSWORD='${{ secrets.DB_SERVER_PASSWORD }}'" > ../restoredata.sh
          echo "pg_restore -U ${{ secrets.DB_SERVER_USER }} -h ${{ vars.DB_SERVER_NAME }}.postgres.database.azure.com -p 5432 -d ${{ vars.DB_NAME }} --clean --no-owner ./techconfdb_backup.tar" >> ../restoredata.sh
          
      - name: Upload script
        uses: actions/upload-artifact@v4
        with:
          name: restoredata
          path: 'restoredata.sh'
          
      - name: Run script
        run: | 
          sh restoredata.sh
          
  BuildWebAPP:
    name: Build Web APP
    needs: DeployInfraAndBuild
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Download Service Bus Connection String
        uses: actions/download-artifact@v4
        with:
          name: service-bus-connection-string

      - name: Update Config
        working-directory: web
        run: |
           SERVICE_BUS_CONNECTION_STRING=$(cat ../service_bus_connection_string.txt)
           ESCAPED_SERVICE_BUS_CONNECTION_STRING=$(echo "$SERVICE_BUS_CONNECTION_STRING" | sed 's/[&/]/\\&/g')
           sed -i "s|{tmp_db_name}|${{ vars.DB_NAME }}|g" config.py
           sed -i "s|{tmp_db_server_user}|${{ secrets.DB_SERVER_USER }}|g" config.py
           sed -i "s|{tmp_db_server_password}|${{ secrets.DB_SERVER_PASSWORD }}|g" config.py
           sed -i "s|{tmp_service_bus_connection}|$ESCAPED_SERVICE_BUS_CONNECTION_STRING|g" config.py

      - name: Zip artifact for deployment
        working-directory: web 
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: frontend-app
          path: './web/release.zip'
          
  DeployWebAPP:
    name: Deploy Web APP
    needs: BuildWebAPP
    runs-on: ubuntu-latest
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: frontend-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.SP_CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: ${{ vars.APP_NAME }}
          slot-name: 'Production'
